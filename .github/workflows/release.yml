name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$previous_tag" ]; then
          git log --pretty=format:"* %s (%h)" > CHANGELOG.txt
        else
          git log --pretty=format:"* %s (%h)" $previous_tag..HEAD > CHANGELOG.txt
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create release archive
      run: |
        # Create release package
        mkdir -p release
        cp -r config docs scripts src tools *.md release/
        cd release
        tar -czf ../monsterr-media-server-${{ steps.get_version.outputs.VERSION }}.tar.gz .
        cd ..
        
        # Generate SHA256 checksums
        sha256sum monsterr-media-server-${{ steps.get_version.outputs.VERSION }}.tar.gz > checksums.txt
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          # Monsterr Media Server ${{ steps.get_version.outputs.VERSION }}
          
          ## Changes in this release:
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          1. Download the release archive
          2. Extract the contents
          ```bash
          tar -xzf monsterr-media-server-${{ steps.get_version.outputs.VERSION }}.tar.gz
          ```
          3. Run the installation script
          ```bash
          sudo ./install_media_server.sh
          ```
          
          ## Upgrade Instructions
          
          If upgrading from a previous version:
          
          1. Back up your configuration
          ```bash
          sudo ./scripts/utils/collect_debug_info.sh
          ```
          
          2. Stop the current installation
          ```bash
          docker-compose down
          ```
          
          3. Install the new version
          ```bash
          sudo ./install_media_server.sh --upgrade
          ```
          
          ## Verification
          
          SHA256 checksums are provided in `checksums.txt`. Verify the download with:
          ```bash
          sha256sum -c checksums.txt
          ```
          
          ## Documentation
          
          Full documentation is available in the `docs` directory and on our GitHub wiki.
          
          ## Support
          
          If you encounter any issues, please:
          
          1. Check the [Troubleshooting Guide](docs/guides/troubleshooting.md)
          2. Run the debug collection tool:
          ```bash
          sudo ./scripts/utils/collect_debug_info.sh
          ```
          3. [Open an issue](../../issues/new/choose) with the debug information
        
        files: |
          monsterr-media-server-${{ steps.get_version.outputs.VERSION }}.tar.gz
          checksums.txt
        draft: false
        prerelease: false
    
    - name: Update documentation
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Update version references
        find docs -type f -name "*.md" -exec sed -i "s/latest/${{ steps.get_version.outputs.VERSION }}/g" {} +
        
        # Commit and push if there are changes
        git add docs
        git diff --staged --quiet || (git commit -m "docs: Update version references to ${{ steps.get_version.outputs.VERSION }}" && git push)
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Release creation failed for ${{ steps.get_version.outputs.VERSION }}',
            body: 'The release workflow failed. Please check the workflow logs for details.',
            labels: ['bug', 'release']
          })