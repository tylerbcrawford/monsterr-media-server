#!/usr/bin/env node

const express = require('express');
const path = require('path');
const fs = require('fs').promises;
const { execSync } = require('child_process');
const app = express();
const port = process.env.PORT || 8080;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'setup')));

// Serve setup interface
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'setup', 'index.html'));
});

// API endpoint to validate paths
app.post('/api/validate/path', async (req, res) => {
    try {
        const { path: dirPath } = req.body;
        await fs.access(dirPath);
        const stats = await fs.stat(dirPath);
        res.json({
            exists: true,
            isDirectory: stats.isDirectory(),
            writable: await isWritable(dirPath)
        });
    } catch (error) {
        res.json({
            exists: false,
            error: error.message
        });
    }
});

// API endpoint to validate domain
app.post('/api/validate/domain', async (req, res) => {
    try {
        const { domain } = req.body;
        const isValid = /^([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/.test(domain);
        res.json({
            valid: isValid,
            message: isValid ? 'Domain is valid' : 'Invalid domain format'
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API endpoint to test SMTP settings
app.post('/api/validate/smtp', async (req, res) => {
    const { host, port, username, password, sender } = req.body;
    try {
        // Basic validation
        if (!host || !port) {
            return res.json({
                valid: false,
                message: 'Host and port are required'
            });
        }

        // Test connection (optional)
        if (username && password) {
            // Here you could implement actual SMTP testing
            // For now, just validate format
            res.json({
                valid: true,
                message: 'SMTP settings look valid'
            });
        } else {
            res.json({
                valid: true,
                message: 'Basic SMTP settings provided'
            });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API endpoint to save configuration
app.post('/api/config/save', async (req, res) => {
    try {
        const config = req.body;
        
        // Validate required fields
        const requiredFields = ['DOMAIN', 'MEDIA_DIR', 'DOWNLOADS_DIR', 'TIMEZONE'];
        const missingFields = requiredFields.filter(field => !config[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                error: `Missing required fields: ${missingFields.join(', ')}`
            });
        }

        // Generate Authelia secrets if not provided
        if (!config.AUTHELIA_JWT_SECRET) {
            config.AUTHELIA_JWT_SECRET = execSync('openssl rand -base64 32').toString().trim();
        }
        if (!config.AUTHELIA_SESSION_SECRET) {
            config.AUTHELIA_SESSION_SECRET = execSync('openssl rand -base64 32').toString().trim();
        }
        if (!config.AUTHELIA_STORAGE_ENCRYPTION_KEY) {
            config.AUTHELIA_STORAGE_ENCRYPTION_KEY = execSync('openssl rand -base64 32').toString().trim();
        }

        // Create config.env content
        let configContent = '# Generated by Monsterr Media Server Setup\n\n';
        for (const [key, value] of Object.entries(config)) {
            configContent += `${key}="${value}"\n`;
        }

        // Save to config.env
        const configPath = path.join(process.cwd(), '..', 'config.env');
        await fs.writeFile(configPath, configContent);

        res.json({
            success: true,
            message: 'Configuration saved successfully'
        });
    } catch (error) {
        res.status(500).json({
            error: 'Failed to save configuration',
            details: error.message
        });
    }
});

// Helper function to check if a directory is writable
async function isWritable(path) {
    try {
        const testFile = `${path}/.write-test-${Date.now()}`;
        await fs.writeFile(testFile, '');
        await fs.unlink(testFile);
        return true;
    } catch {
        return false;
    }
}

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// Start server
app.listen(port, () => {
    console.log(`
╔════════════════════════════════════════════════════════════╗
║             Monsterr Media Server Setup Wizard             ║
╠════════════════════════════════════════════════════════════╣
║                                                            ║
║  Setup interface is now available at:                      ║
║  http://localhost:${port}                                    ║
║                                                            ║
║  Press Ctrl+C to exit                                      ║
║                                                            ║
╚════════════════════════════════════════════════════════════╝
`);
});